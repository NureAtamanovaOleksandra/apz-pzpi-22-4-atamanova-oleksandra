Харківський університет радіоелектроніки
Факультет комп'ютерних наук
Кафедра програмної інженерії

ЗВІТ

з лабораторної роботи №3
з дисципліни «Архітектура програмного забезпечення»
на тему: «Web-застосунок»

Виконала ст. гр. ПЗПІ-22-4
Атаманова Олександра Петрівна

Перевірив
асистент кафедри ПІ
Дашенков Дмитро Сергійович 

Харків 2025

1	ВСТУП

1.1	Назва системи
Програмна система для управління та автоматизації дистанційних замовлень у магазині світлодіодної продукції.

1.2	Мета роботи
Розробити web-частину (frontend) для програмної системи для управління та автоматизації дистанційних замовлень у магазині світлодіодної продукції.

1.3	Посилання на GitHub
https://github.com/NureAtamanovaOleksandra/apz-pzpi-22-4-atamanova-oleksandra/tree/main/Lab3/frontend

2	ОПИС ПРИЙНЯТИХ ІНЖЕНЕРНИХ РІШЕНЬ

2.1 Технологічний стек
Для створення веб-застосунку було обрано сучасні технології, які відповідають вимогам завдання та забезпечують ефективну розробку і підтримку.
Таблиця 2.1.1 – Технологічний стек
Компонент	Технологія	Обґрунтування
Фронтенд	React, Material UI		React дозволяє будувати гнучкий інтерфейс на основі компонентів, Material UI забезпечує швидке створення сучасного дизайну.
Бекенд	Node.js, Express		Node.js з Express дає змогу швидко реалізувати серверну логіку та REST API. 
База даних		MongoDB	MongoDB обрано за гнучкість у зберіганні даних та зручну роботу з JSON-структурами.

Фронтенд: Основою клієнтської частини є React, що забезпечує розділення інтерфейсу на незалежні компоненти та спрощує масштабування застосунку. Для стилізації використовується Material UI, який дозволяє швидко створювати адаптивний і сучасний вигляд сторінок.
Бекенд: Серверна частина реалізована на Node.js з використанням Express. Це рішення дозволяє легко організувати маршрутизацію, обробку запитів і взаємодію з базою даних, а також забезпечує високу продуктивність.
База даних: Для зберігання інформації використовується MongoDB, яка підтримує гнучкі схеми та ідеально підходить для роботи з даними у форматі JSON, що спрощує інтеграцію з фронтендом.

2.2 Мовна локалізація
Інтернаціоналізація (i18n) у проєкті дозволяє перемикати інтерфейс між українською та англійською мовами. Основні підходи:
-	Зберігання перекладів:
Всі текстові елементи інтерфейсу винесені у окремі JSON-файли для кожної мови (наприклад, ua/translation.json та en/translation.json). Це спрощує додавання нових мов і редагування існуючих перекладів без зміни основного коду.


-	Перемикач мови:
Додано кнопки для вибору мови. Зміна мови відбувається миттєво завдяки використанню бібліотеки react-i18next, яка автоматично оновлює всі підписи на сторінці.
Таким чином, система легко масштабується для додавання нових мов і забезпечує зручний багатомовний інтерфейс для користувачів.

2.3 Керування ролями користувачів
Для забезпечення різних рівнів доступу в системі реалізовано такі підходи:
-	Розмежування прав доступу (RBAC):
Кожен користувач має певну роль (наприклад, "user" або "admin"), яка визначає, які сторінки та функції йому доступні. Адміністратор має розширені можливості для керування даними, тоді як звичайний користувач бачить лише власний функціонал.
-	Автентифікація через JWT:
Після успішного входу користувач отримує JSON Web Token (JWT), який зберігається у браузері та автоматично додається до всіх запитів до серверу. Це забезпечує безпечну ідентифікацію користувача протягом сесії.
-	Авторизація на сервері:
Перед виконанням адміністративних дій сервер перевіряє роль користувача, що дозволяє захистити критичні операції від несанкціонованого доступу.


2.4 Функціональність адміністрування
Адміністративна панель надає такі основні можливості:
-	Керування користувачами:
Адміністратор може переглядати список користувачів, редагувати їх роль та видаляти користувачів із системи.
-	Керування даними системи:
Доступний перегляд, редагування та видалення основних даних (наприклад, інформації про товари, замовлення, користувачів тощо) через відповідні сторінки адміністратора.
-	Створення резервних копій:
Реалізовано функцію створення резервної копії всіх налаштувань і даних системи. Копія зберігається на сервері, а адміністратор отримує шлях до файлу резервної копії.
-	Імпорт та експорт даних:
Адміністратор може експортувати всі дані системи у вигляді файлу (наприклад, у форматі JSON) для збереження або перенесення. Також є можливість імпортувати дані з файлу для відновлення або оновлення інформації у системі.

2.5 Дизайн API
API побудовано відповідно до принципів REST:
-	Структура ендпоінтів:
Для кожної сутності системи створено окремі маршрути, наприклад:
/api/users — для керування користувачами,
/api/products — для роботи з товарами,
/api/orders — для замовлень,
/api/admin/backup — для резервного копіювання та відновлення даних.

-	Безпека:
Всі запити до API вимагають автентифікації за допомогою JWT-токена. Доступ до адміністративних маршрутів обмежено лише для користувачів із роллю "admin", що перевіряється на сервері.
-	Обмін даними:
Для передачі інформації між клієнтом і сервером використовується формат JSON, який є зручним для роботи з MongoDB та легко обробляється у фронтенді.

2.6 Проектування бази даних
База даних побудована на основі MongoDB, що забезпечує гнучкість і масштабованість системи:
-	Структура колекцій:
Для кожного типу даних створено окрему колекцію, наприклад:
users — для зберігання інформації про користувачів,
products — для товарів,
orders — для замовлень,
backups — для резервних копій тощо.
-	Гнучкість структури:
Завдяки NoSQL-підходу MongoDB дозволяє зберігати документи з різною структурою та легко додавати нові поля без необхідності змінювати загальну схему бази даних. Це спрощує розширення функціоналу системи у майбутньому.
2.7 Опис взаємодії компонентів Web-застосунку
Веб-застосунок складається з трьох основних частин: фронтенду, бекенду та бази даних, які спільно забезпечують повний цикл роботи системи.
Фронтенд реалізовано на React і він містить такі ключові компоненти:
-	Інтерфейс користувача:
Компоненти для перегляду, додавання та редагування даних (наприклад, товари, замовлення, користувачі). Всі дії виконуються через інтерактивні форми, таблиці та списки.
-	Адміністративна панель:
Окремі компоненти для адміністраторів, які дозволяють керувати користувачами, виконувати резервне копіювання, імпорт та експорт даних. Доступ до цих компонентів обмежено роллю "admin".
-	Мовний перемикач:
Компонент для вибору мови (українська/англійська), який динамічно змінює всі підписи в інтерфейсі за допомогою react-i18next.

Бекенд побудовано на Node.js з використанням Express і виконує такі функції:
-	API-ендпоінти:
Обробляють всі запити від фронтенду, наприклад: отримання списків, додавання, редагування та видалення даних (наприклад, /api/users, /api/products, /api/orders).


-	Автентифікація та авторизація:
Для захисту API використовується JWT. Кожен запит перевіряється на наявність токена та ролі користувача, що дозволяє розмежувати доступ до різних функцій.
-	Робота з базою даних:
Для взаємодії з MongoDB використовується бібліотека Mongoose, яка спрощує виконання CRUD-операцій та забезпечує валідацію даних.

Потік взаємодії
-	Вхід у систему:
Користувач вводить логін і пароль, фронтенд надсилає запит на бекенд, отримує JWT-токен і зберігає його у локальному сховищі.
-	Доступ до функцій:
Фронтенд додає токен до всіх запитів. Бекенд перевіряє токен і роль користувача, після чого дозволяє або забороняє виконання дій.
-	Операції з даними:
Користувачі взаємодіють з інтерфейсом, а фронтенд надсилає відповідні запити до API. Бекенд отримує дані з MongoDB і повертає їх у форматі JSON.
-	Зміна мови:
При виборі іншої мови фронтенд завантажує відповідний файл перекладу, і всі підписи оновлюються автоматично.


-	Адміністративні дії:
Адміністратор може додавати/видаляти користувачів, створювати резервні копії, імпортувати та експортувати дані. Всі ці дії доступні лише після перевірки ролі "admin".

Взаємодія з базою даних
Бекенд використовує MongoDB для зберігання всієї інформації про користувачів, товари, замовлення та налаштування. Всі запити до бази виконуються через Mongoose, що забезпечує зручність і безпеку роботи з даними.

2.8 Діаграми
 
Рисунок 2.8.1 – UML діаграма прецедентів (Use Case Diagram) Web-додатку

Рисунок 2.8.2 – UML діаграма компонентів (Component Diagram)

Рисунок 2.8.3 - UML діаграма пакетів (Package Diagram)

Рисунок 2.8.3 - UML діаграма активностей (Package Diagram) для управління моделлю тварини

2.9 Скріншоти вебсайту
 
Рисунок 2.9.1 – Головна сторінка з формою авторизації

Рисунок 2.9.2 – Приклад мовної локалізації

Панель адміністратора:
 
Рисунок 2.9.3 – Вигляд сторінки продуктів
 
Рисунок 2.9.4 – Вікно створення продукту
 
Рисунок 2.9.5 – Вікно редагування продукту

Рисунок 2.9.6 – Сторінка замовлень та візуальне відображення статусів
 
Рисунок 2.9.7 – Сторінка користувачів

Рисунок 2.9.8 – Вікно редагування даних користувача
 
Рисунок 2.9.9 – Вікно створення нового користувача

Рисунок 2.9.10 – Сторінка статистики
 
Рисунок 2.9.11 – Приклад мовної локалізації статистики

Рисунок 2.9.12 – Сторінка налаштувань
 
Рисунок 2.9.13 – Приклад мовної локалізації налаштувань

Для користувача:
 
Рисунок 2.9.14 – Сторінка продуктів

Рисунок 2.9.15 – Сторінка кошика
 
Рисунок 2.9.16 – Приклад мовної локалізації кошика
 
Рисунок 2.9.17 – Сторінка замовлень

ВИСНОВКИ

У ході виконання лабораторної роботи було створено повноцінний веб-застосунок для інтернет-магазину з розмежуванням прав доступу для користувачів і адміністраторів. Реалізовано сучасний інтерфейс на React, що забезпечує зручну роботу як для звичайних користувачів (оформлення замовлень, перегляд товарів, керування кошиком), так і для адміністраторів (керування користувачами, товарами, замовленнями, перегляд статистики, резервне копіювання, імпорт та експорт даних).
Забезпечено підтримку багатомовності — інтерфейс перемикається між українською та англійською мовами. Всі ключові функції адміністрування винесені в окремий інтерфейс, доступний лише користувачам із відповідною роллю.
У звіті детально розглянуто архітектуру системи, описано взаємодію між фронтендом, бекендом і базою даних, наведено UML-діаграми для основних сценаріїв роботи та структури застосунку.
Весь код проєкту розміщено на GitHub.
Результати роботи підтвердили важливість чіткої організації коду, використання сучасних підходів до розмежування доступу та локалізації для створення масштабованих і зручних веб-систем.












