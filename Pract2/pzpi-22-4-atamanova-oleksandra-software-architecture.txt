Харківський університет радіоелектроніки
Факультет комп'ютерних наук
Кафедра програмної інженерії



ЗВІТ
до практичної роботи номер 2 з дисципліни 
"Архітектура програмного забезпечення"
на тему: "Архітектура відомих програмних систем"




Виконала ст. гр. ПЗПІ-22-4
Атаманова Олександра Петрівна

Перевірив
ст. викладач кафедри ПІ
Сокорчук Ігор Петрович
 


Харків 2025

1 ІСТОРІЯ ЗМІН

№	Дата	Версія звіту	Опис змін та виправлень
1	11.04.2025	0.1	Створено розділи «Завдання», «Опис виконаної роботи» та «Висновки»
2	12.04.2025	0.2	Створено додатки «Додаток А», «Додаток Б»

2 ЗАВДАННЯ 

1.	Підготувати доповідь про архітектуру однієї з відомих складних програмних систем.
2.	Створити та оформити слайди презентації доповіді.
3.	Створити та опублікувати на YouTube відеозапис доповіді.
4.	Оформити та завантажити на dl.nure.ua звіт до виконаної роботи.
5.	Експортувати звіт у файл у простому текстововому форматі та завантажити цей файл у директорію Pract2 у репозиторії GitHub.

3 ОПИС ВИКОНАНОЇ РОБОТИ

	У межах практичного заняття було проведено дослідження архітектури програмної системи Djinni - популярної платформи з пошуку роботи в галузі ІТ, орієнтованої переважно на український ринок. Метою роботи стало вивчення структури системи, її ключових компонентів, архітектурного підходу, використаних технологій, механізмів масштабування та безпеки, а також принципів взаємодії користувачів із системою через вебінтерфейс та API.
У процесі дослідження було проаналізовано відкриті джерела: технічні блоги, матеріали з конференцій, GitHub-проєкти, обговорення з інтерв’ю розробників Djinni, а також поведінкові аспекти самого вебзастосунку. Особливу увагу було приділено способу реалізації клієнт-серверної взаємодії, структурі зберігання даних, логіці обробки запитів і забезпеченню конфіденційності користувачів.
Архітектура програмного забезпечення - це структура системи, яка описує її основні компоненти, принципи взаємодії між ними, вибрані технології, способи масштабування, обробки даних та забезпечення безпеки. Вона визначає, як саме програмна система функціонує, наскільки легко її підтримувати, розвивати й адаптувати до змін. Якісно спроєктована архітектура — це запорука ефективної, надійної й масштабованої системи, що відповідає вимогам користувачів та бізнесу.
Djinni - це не просто біржа вакансій. Це анонімна платформа, що забезпечує взаємодію між роботодавцями та шукачами в ІТ-сфері без необхідності публічного резюме чи офіційного оголошення про вакансію. Така специфіка накладає особливі вимоги до архітектури: система повинна гарантувати приватність, масштабованість, швидкість відгуку і водночас підтримувати багатофункціональний інтерфейс з рекомендаціями, фільтрами, повідомленнями та системою оцінок.
Архітектура Djinni побудована за моделлю трирівневої клієнт-серверної системи, що включає:
	клієнтський рівень (Frontend) — реалізований за допомогою HTML/CSS/JavaScript та фреймворку React для забезпечення інтерактивності інтерфейсу. Сторінки формуються частково на сервері (SSR) для оптимізації SEO і швидшого завантаження;
	серверний рівень (Backend) — побудований на основі мови Ruby із використанням фреймворку Ruby on Rails, що дозволяє швидко розгортати RESTful API, підтримувати шаблони й логіку обробки запитів. Інтерфейс взаємодії з базою даних реалізовано через ORM ActiveRecord;
	рівень даних (Database) — для зберігання основної інформації використовується PostgreSQL, реляційна база даних з підтримкою транзакцій, складних запитів і індексації. Для кешування активно використовується Redis.
Ключовими аспектами архітектури Djinni є:
–	анонімність та конфіденційність: усі профілі кандидатів за замовчуванням приховані. Система реалізує доступ до інформації лише за запитом, забезпечуючи контроль за витоком персональних даних. Для цього всі взаємодії логуються та шифруються, а критичні дані зберігаються з урахуванням політик GDPR;
–	масштабованість: Djinni використовує горизонтальне масштабування вебсерверів, зокрема через Heroku, що дозволяє гнучко регулювати навантаження. Компоненти додатку можуть бути розгорнуті незалежно, що полегшує обслуговування й оновлення;
–	сповіщення та взаємодія в реальному часі: для реалізації повідомлень, відповідей на заявки та інформування користувачів застосовується система WebSocket (через ActionCable у Rails) або черги повідомлень (Sidekiq);
–	рекомендаційна система: реалізована на основі простих фільтрів, які враховують мову програмування, досвід, рівень зарплати, місце розташування. Деякі елементи ранжування формуються на основі статистичної аналітики активності користувачів, зібраної з бази даних.
Важливим елементом є адміністративна панель, через яку модератори Djinni мають змогу перевіряти профілі, переглядати порушення, банити користувачів, вручну редагувати вакансії та вести аналітику щодо активності платформи.
Усі HTTP-запити проходять через уніфікований маршрутизатор, який перенаправляє їх на відповідні контролери. Контролери перевіряють права доступу через авторизаційну систему Devise, а далі викликають сервіси, які реалізують бізнес-логіку. Відповіді формуються у вигляді HTML-сторінок або JSON-об’єктів для фронтенду чи мобільного клієнта.

4 ВИСНОВКИ

Djinni - це приклад системи, де простота архітектури поєднана з продуманими рішеннями, які дозволяють платформі стабільно працювати навіть під час пікових навантажень, таких як хвиля нових резюме після початку року чи великі хвилі рекрутингу в ІТ-компаніях. Завдяки ефективному стеку технологій, архітектура Djinni зберігає баланс між стабільністю, швидкістю оновлень і вимогами щодо безпеки.
У результаті дослідження було підтверджено, що Djinni має чітку, гнучку та масштабовану архітектуру, яка відповідає потребам сучасного ринку праці в галузі ІТ. Система побудована за принципами модульності, розділення відповідальностей і орієнтації на конфіденційність, що дозволяє їй залишатися однією з найпопулярніших платформ в Україні та за її межами.
 
ДОДАТОК А
(посилання на відеозапис доповіді та текст хронологічного опису доповіді)

Відеозапис доповіді на YouTube: https://youtu.be/k4o0D0oeDwg
Хронологічний опис доповіді: 
00:00 Знайомство 
00:29 Зміст доповіді 
00:47 Завдання доповіді 
01:52 Що таке архітектура програмного забезпечення 
02:35 Що таке Djinni 
03:16 Загальна архітектура Djinni: Frontend 
03:40 Загальна архітектура Djinni: Backend 
04:04 Загальна архітектура Djinni: Database 
04:23 Ключові компоненти архітектури 
06:27 Висновки

ДОДАТОК Б
(слайди презентації доповіді)

Рисунок Б.1 – Вступ доповіді

Рисунок Б.2 – Зміст доповіді

Рисунок Б.3 – Завдання доповіді

Рисунок Б.4 – Опис поняття Архітектура програмного забезпечення

Рисунок Б.5 – Загальний опис Djinni

Рисунок Б.6 – Загальна архітектура Djinni

Рисунок Б.7 – Ключові компоненти архітектури

Рисунок Б.8 – Висновки
